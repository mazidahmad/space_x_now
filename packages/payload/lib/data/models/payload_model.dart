import '../../domain/entities/payload.dart';

class PayloadModel extends Payload {
  const PayloadModel({
    required super.customers,
    required super.nationalities,
    required super.manufacturers,
    super.massKg,
    super.massLbs,
    super.orbit,
    super.referenceSystem,
    super.regime,
    super.longitude,
    super.semiMajorAxisKm,
    super.eccentricity,
    super.periapsisKm,
    super.apoapsisKm,
    super.inclinationDeg,
    super.periodMin,
    super.lifespanYears,
    super.epoch,
    super.meanMotion,
    super.raan,
    super.argOfPericenter,
    super.meanAnomaly,
    required super.name,
    required super.type,
    required super.reused,
    super.launch,
    required super.id,
  });

  factory PayloadModel.fromJson(Map<String, dynamic> json) {
    return PayloadModel(
      customers: List<String>.from(json['customers'] ?? []),
      nationalities: List<String>.from(json['nationalities'] ?? []),
      manufacturers: List<String>.from(json['manufacturers'] ?? []),
      massKg: (json['mass_kg'] as num?)?.toDouble(),
      massLbs: (json['mass_lbs'] as num?)?.toDouble(),
      orbit: json['orbit'],
      referenceSystem: json['reference_system'],
      regime: json['regime'],
      longitude: (json['longitude'] as num?)?.toDouble(),
      semiMajorAxisKm: (json['semi_major_axis_km'] as num?)?.toDouble(),
      eccentricity: (json['eccentricity'] as num?)?.toDouble(),
      periapsisKm: (json['periapsis_km'] as num?)?.toDouble(),
      apoapsisKm: (json['apoapsis_km'] as num?)?.toDouble(),
      inclinationDeg: (json['inclination_deg'] as num?)?.toDouble(),
      periodMin: (json['period_min'] as num?)?.toDouble(),
      lifespanYears: json['lifespan_years'],
      epoch: json['epoch'],
      meanMotion: (json['mean_motion'] as num?)?.toDouble(),
      raan: (json['raan'] as num?)?.toDouble(),
      argOfPericenter: (json['arg_of_pericenter'] as num?)?.toDouble(),
      meanAnomaly: (json['mean_anomaly'] as num?)?.toDouble(),
      name: json['name'] ?? '',
      type: json['type'] ?? '',
      reused: json['reused'] ?? false,
      launch: json['launch'],
      id: json['id'] ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'customers': customers,
      'nationalities': nationalities,
      'manufacturers': manufacturers,
      'mass_kg': massKg,
      'mass_lbs': massLbs,
      'orbit': orbit,
      'reference_system': referenceSystem,
      'regime': regime,
      'longitude': longitude,
      'semi_major_axis_km': semiMajorAxisKm,
      'eccentricity': eccentricity,
      'periapsis_km': periapsisKm,
      'apoapsis_km': apoapsisKm,
      'inclination_deg': inclinationDeg,
      'period_min': periodMin,
      'lifespan_years': lifespanYears,
      'epoch': epoch,
      'mean_motion': meanMotion,
      'raan': raan,
      'arg_of_pericenter': argOfPericenter,
      'mean_anomaly': meanAnomaly,
      'name': name,
      'type': type,
      'reused': reused,
      'launch': launch,
      'id': id,
    };
  }

  PayloadModel copyWith({
    List<String>? customers,
    List<String>? nationalities,
    List<String>? manufacturers,
    double? massKg,
    double? massLbs,
    String? orbit,
    String? referenceSystem,
    String? regime,
    double? longitude,
    double? semiMajorAxisKm,
    double? eccentricity,
    double? periapsisKm,
    double? apoapsisKm,
    double? inclinationDeg,
    double? periodMin,
    int? lifespanYears,
    String? epoch,
    double? meanMotion,
    double? raan,
    double? argOfPericenter,
    double? meanAnomaly,
    String? name,
    String? type,
    bool? reused,
    String? launch,
    String? id,
  }) {
    return PayloadModel(
      customers: customers ?? this.customers,
      nationalities: nationalities ?? this.nationalities,
      manufacturers: manufacturers ?? this.manufacturers,
      massKg: massKg ?? this.massKg,
      massLbs: massLbs ?? this.massLbs,
      orbit: orbit ?? this.orbit,
      referenceSystem: referenceSystem ?? this.referenceSystem,
      regime: regime ?? this.regime,
      longitude: longitude ?? this.longitude,
      semiMajorAxisKm: semiMajorAxisKm ?? this.semiMajorAxisKm,
      eccentricity: eccentricity ?? this.eccentricity,
      periapsisKm: periapsisKm ?? this.periapsisKm,
      apoapsisKm: apoapsisKm ?? this.apoapsisKm,
      inclinationDeg: inclinationDeg ?? this.inclinationDeg,
      periodMin: periodMin ?? this.periodMin,
      lifespanYears: lifespanYears ?? this.lifespanYears,
      epoch: epoch ?? this.epoch,
      meanMotion: meanMotion ?? this.meanMotion,
      raan: raan ?? this.raan,
      argOfPericenter: argOfPericenter ?? this.argOfPericenter,
      meanAnomaly: meanAnomaly ?? this.meanAnomaly,
      name: name ?? this.name,
      type: type ?? this.type,
      reused: reused ?? this.reused,
      launch: launch ?? this.launch,
      id: id ?? this.id,
    );
  }
}
